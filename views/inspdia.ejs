<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Pendientes d√≠a</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">

  
  <style>
    body {
      padding: 20px;
    }
    table {
      font-size: 0.9rem;
    }
    .grupo {
      margin-top: 40px;
    }
    .grupo h5 {
      margin-bottom: 10px;
      color: #0d6efd;
    }


    .regresar-link {
        color: white;
        text-decoration: none;
        font-weight: bold;
        position: relative;
        transition: color 0.3s ease;
    }

    .regresar-link::after {
        content: "";
        position: absolute;
        width: 100%;
        height: 2px;
        background-color: white;
        bottom: 0;
        left: 0;
        transform: scaleX(0);
        transition: transform 0.3s ease;
        transform-origin: bottom right;
    }

    .regresar-link:hover::after {
        transform: scaleX(1);
        transform-origin: bottom left;
    }

    .regresar-link:hover {
        color: #f0f0f0;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: hwb(210 84% 9%) !important;
    }

  </style>
</head>

<body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f8f9fa;">
  <div id="activities" style="
    border: 1px solid #dee2e6;
    padding: 10px 20px;
    border-radius: 8px;
    background-color: #aa2323;
    color: white;
    display: flex;
    align-items: center;
    justify-content: space-between;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  ">
    <a href="/menuprc" class="regresar-link" style="margin-left: 20px;">Inicio</a>
    <a href="/opciones" class="regresar-link" style="color: white; text-decoration: none; font-weight: 500;">‚Üê Regresar</a>
    <h4 style="margin: 0;">Moldes JR</h4>
  </div>

  <div class="container mt-4 px-4">
    <h2 style="color: #333;">Inspecciones agrupadas por funcionario y d√≠a</h2>
    <div class="mb-3">
      <button class="btn btn-success btn-sm" onclick="exportarExcel()">üì• Exportar a Excel</button>
    </div>

    <% if (rows && rows.length > 0) { %>
      <% 
        const agrupado = {};
        rows.forEach(row => {
          const funcionarioKey = `${row.funcionario} (${row.func_doc})`;
          const fecha = new Date(row.fecha_inspeccion).toLocaleDateString('es-CO');
          if (!agrupado[funcionarioKey]) agrupado[funcionarioKey] = {};
          if (!agrupado[funcionarioKey][fecha]) agrupado[funcionarioKey][fecha] = [];
          agrupado[funcionarioKey][fecha].push(row);
        });

        const coloresFecha = ['#f8d7da', '#e2e3e5'];
      %>

      <% Object.keys(agrupado).forEach(funcionario => { %>
        <div style="margin-bottom: 30px;">
          <div style="
            background-color: #ffffff;
            border-left: 6px solid #aa2323;
            padding: 12px 16px;
            border-radius: 6px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
          ">
            üë§ Funcionario: <%= funcionario %>
          </div>

          <%
            let fechaIndex = 0;
            Object.keys(agrupado[funcionario]).forEach(fecha => {
              const colorFecha = coloresFecha[fechaIndex % coloresFecha.length];
              fechaIndex++;
          %>
            <!-- borde tabla fechas                       -->
            <div style="margin-top: 12px; background-color: hsl(230, 14%, 91%); padding: 10px; border-radius: 6px;">
              <h6 style="
                background-color: #e9ecef;
                padding: 6px 12px;
                border-radius: 4px;
                color: #495057;
                font-weight: 500;
              ">
                üìÖ Fecha: <%= fecha %>
              </h6>

              <table class="table table-bordered table-sm tablaExportable table-striped mt-2" style="background-color: #fff; border-radius: 6px; overflow: hidden;">
                <thead class="table-light">
                  <tr>
                    <th>Centro de Costo</th>
                    <th>Id</th>
                    <th>Aspecto</th>
                    <th>Si</th>
                    <th>No</th>
                    <th>NA</th>
                    <th>Observaci√≥n</th>
                  </tr>
                </thead>

                <% 
                  const gruposPorCentro = {};
                  agrupado[funcionario][fecha].forEach(row => {
                    if (!gruposPorCentro[row.ocompra]) gruposPorCentro[row.ocompra] = [];
                    gruposPorCentro[row.ocompra].push(row);
                  });
                %>

                <% Object.keys(gruposPorCentro).forEach(cc => { %>
                   <!--  linea ccosto  --> 
                  <tbody style="background-color: <%= colorFecha %>; border-top: 3.5px solid blue;">
                    <% gruposPorCentro[cc].forEach(row => { %>
                      <tr>
                        <td><%= row.ocompra %></td>
                        <td><%= row.no %></td>
                        <td><%= row.aspecto %></td>
                        <td><%= row.si %></td>
                        <td><%= row.no_ %></td>
                        <td><%= row.na %></td>
                        <td><%= row.observacion %></td>
                      </tr>
                    <% }); %>
                  </tbody>
                <% }); %>
              </table>
            </div>
          <% }); %>
        </div>
      <% }); %>

    <% } else { %>
      <div class="alert alert-warning">No hay registros para mostrar.</div>
    <% } %>
  </div>

  <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>

<script>
  function exportarExcel() {
    const tablas = document.querySelectorAll('.tablaExportable');
    const data = [];

    tablas.forEach((tabla) => {
      // Buscar el contenedor de la tabla para obtener el funcionario y la fecha
      const fechaElem = tabla.closest('div').querySelector('h6');
      const funcionarioElem = tabla.closest('div').parentElement.querySelector('div');

      const funcionarioTexto = funcionarioElem?.innerText?.trim() || '';
      const fechaTexto = fechaElem?.innerText?.trim() || '';

      // Agregar funcionario y fecha como encabezado
      data.push([funcionarioTexto]);
      data.push([fechaTexto]);
      data.push([]); // L√≠nea en blanco

      // Agregar contenido de la tabla
      const filas = Array.from(tabla.rows);
      filas.forEach(fila => {
        const celdas = Array.from(fila.cells);
        const filaDatos = [];

        celdas.forEach(celda => {
          let texto = celda.innerText.trim();
          if (/^\d{2}\/\d{2}\/\d{4}$/.test(texto)) {
            const [d, m, y] = texto.split('/');
            const fecha = new Date(`${y}-${m}-${d}`);
            filaDatos.push({ t: 'd', v: fecha });
          } else {
            filaDatos.push(texto);
          }
        });

        data.push(filaDatos);
      });

      data.push([]); // Separador entre tablas
    });

    const hoja = XLSX.utils.aoa_to_sheet(data);
    const libro = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(libro, hoja, "Historial");
    XLSX.writeFile(libro, "historial_observaciones.xlsx");
  }
</script>

</body>


</html>

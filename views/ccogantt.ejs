<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mostrar Verticalmente</title>
    <link rel="stylesheet" href="/css/style.css">

    <link rel="stylesheet" href="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.css" type="text/css">
    <script src="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js" type="text/javascript"></script>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Bootstrap JS (requiere Popper.js también) -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
  
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow-x: hidden; /* evita scroll horizontal en todo el body */
        }

        html {
            overflow-x: hidden;
        }

        /* Cambio de color de los meses */
        .month-cell {
            background-color: #ffffff; /* Color de fondo del mes */
            color: #1506f3; /* Color del texto (verde) */
            font-weight: bold;  /* Poner el texto en negrita */
            text-align: center;
        }

        .gantt_task_cell {
        border-color: #b1b4b3 !important; /* Cambio el color de las celdas de las tareas a rojo */
        }

        .gantt_grid_head_cell {
            font-size: 16px !important; /* Ajusta el valor según lo pequeño que lo necesites  tamaño texto Inicio DP*/
        }

        /* tamaño texto model de datos*/ 
        .gantt_tooltip {
            background-color: #333;
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-size: 14px;
            max-width: 600px;
            word-wrap: break-word;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
        }

        /* tamaño texto model de datos*/ 
        .gantt_tooltip b {
            font-size: 16px; /* Aumenta el tamaño del texto de la tarea */
            font-weight: bold;
            color: #f5a623; /* Puedes cambiar el color del texto de la tarea */
        }

        .gantt_tooltip br {
            margin-bottom: 5px;
        }

        .logo {
            width: 70px;
            height: auto;
            cursor: pointer;
        }

        .activities-title {
            font-size: 16px;
            margin: 0; /* Elimina espacio extra de h3 */
        }


        #activities {
            margin-bottom: 20px;
            padding: 20px;
            background-color: #ffffff;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        #activities {
            display: flex;
            align-items: center; /* Centra verticalmente */
            gap: 30px; /* Espacio entre logo y texto */
            padding: 10px 20px;
        }

        .activities-list {
            font-size: 14px;
            padding-left: 0;
            margin: 0;
            list-style-type: none;
        }

            /* Estilo básico para el tooltip manual */
        #customTooltip {
            position: absolute;
            display: none;
            background-color: #333;
            color: white;
            padding: 10px 14px;
            border-radius: 6px;
            font-size: 13px;
            max-width: 720px;
            white-space: normal; /* Asegura que el texto haga salto de línea */
            word-wrap: break-word;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            z-index: 10000;
            pointer-events: none;
        }

        #customTooltip b {
            font-size: 14px;
            color: #f5a623;
        }

        /* Barra de progreso (avance real) */
        .gantt_task_progress {
            background-color: #3d0868 !important; /* Verde para progreso */
            opacity: 0.8;
        }

        /* Barra completa de la tarea (base gris) */
        .gantt_task_bg {
            background-color: #D3D3D3 !important; /* Gris claro */
        }

        /* Fuerza barra de fondo gris para todas las tareas */
        .gantt_task_line {
            background-color: #D3D3D3 !important; /* Gris claro */
            border: none !important;
        }

        /* Barra de progreso: verde */
        .gantt_task_progress {
            background-color: #4CAF50 !important;
            opacity: 0.8;
        }

        html, body {
            margin: 0;
            padding: 0;
            overflow-x: hidden; /* Elimina scroll horizontal global */
        }

        #gantt_container {
            width: 100%;
            max-width: 100vw; /* no mayor que el ancho de viewport */
            overflow-x: auto; /* solo el contenedor hará scroll si es necesario */
            box-sizing: border-box;
            border: 1px solid #ccc; /* opcional para visualizar el contenedor */
        }

        #gantt_here {
            height: 600px; /* Ajusta a lo que necesites */
            margin-top: 20px;
            white-space: nowrap;
            background-color: #ffffff;
            border-radius: 8px;
            border: 1px solid #ccc;
            margin: 0 auto;
            box-sizing: border-box;
        }

</style>        

</head>
        <body>
        <div id="activities" style="
            border: 2px solid #f0f8ff;
            padding: 4px;
            border-radius: 6px;
            background-color: #aa2323;
            width: 100%;
            box-sizing: border-box;
            display: flex;
            align-items: center;
            gap: 20px; /* Espacio entre botón y título */
        ">
            <a href="/opciones" class="regresar-link" style="margin-left: 20px;">Regresar</a>
            <div style="margin-left: auto; padding-right: 20px;">
            <h4 style="margin: 0; color: #ffffff;">Moldes JR</h4>
            </div>    
        </div>      
            <div id="customTooltip" class="gantt_tooltip"></div>

            <div class="d-flex justify-content-between align-items-center" style="margin: 4px 0; padding: 4px 0;">
                <div style="width: 100%; padding-left: 20px; text-align: left;">
                    <h3 class="mb-2 fw-semibold" style="font-size: 1.5rem; color: #2c3e50;">
                        Centros de Costo
                    </h3>
                </div>
            </div>

            <div id="taskModal" style="display:none; position:fixed; top:20%; left:30%; width:40%; background:white; padding:20px; border:1px solid #ccc; z-index:1000;">
                <div id="modalContent"></div>
                <br>
            <button 
                onclick="closeModal()" 
                style="
                    padding: 6px 12px;
                    font-size: 13px;
                    background-color: #007bff;
                    color: white;
                    border: none;
                    border-radius: 20px;
                    cursor: pointer;
                    transition: background-color 0.2s ease;
                "
                onmouseover="this.style.backgroundColor='#0056b3'"
                onmouseout="this.style.backgroundColor='#007bff'"
            >
                Cerrar
            </button>
            </div>

            <script>
                function showModal(content) {
                    document.getElementById("modalContent").innerHTML = content;
                    document.getElementById("taskModal").style.display = "block";
                }

                function closeModal() {
                    document.getElementById("taskModal").style.display = "none";
                }
            </script>

            <div id="gantt_container" style="width: 100%; overflow-x: auto;">
                <div id="gantt_here" style="min-width: 1200px;"></div>
            </div>

            <!-- 4 Botón para activar el modal (solo visible si userIdAct == 1) -->
            <div style="text-align: center; margin-top: 20px;" id="addTaskButtonContainer"></div>

            <script>
                function copiarDatosFormulario() {
                    document.getElementById('maxTaskIdInput').value = maxTaskId;
                    document.getElementById('maxTaskCodeInput').value = maxTaskCode;
                    return true; // Permite el envío del formulario
                }
            </script>

            <script>
                const otrabajo = "<%= otrabajo %>";
            </script>

            <!-- GANTT PROCESO   start_date  -->   
            <script>
                const festivosColombia = {
                '2025-01-01':'Año Nuevo','2025-01-06':'Reyes Magos','2025-03-24':'San José',
                '2025-04-17':'Jueves Santo','2025-04-18':'Viernes Santo','2025-05-01':'Día del Trabajo',
                '2025-05-26':'Ascensión del Señor','2025-06-23':'Corpus Christi',
                '2025-06-30':'Sagrado Corazón',
                '2025-07-20':'Independencia','2025-08-07':'Batalla de Boyacá','2025-08-15':'La Asunción',
                '2025-10-13':'Día de la Raza','2025-11-03':'Todos los Santos','2025-11-17':'Independencia de Cartagena',
                '2025-12-08':'Inmaculada Concepción','2025-12-25':'Navidad'
                };

                var userIdAct = 1;  // Cambia esto a 0 para simular el caso donde el usuario no tiene permisos para modificar.

                gantt.config.xml_date = "%Y-%m-%d %H:%i";
                gantt.config.drag_move = false;
                gantt.config.drag_resize = false;
                gantt.config.drag_links = false;
                gantt.config.show_progress = true; // Habilita barra de progreso
                gantt.config.show_progress.drag_move = false;

                gantt.templates.tooltip_text = function(start, end, task) {
                    let adjustedEndDate = new Date(task.end_date);
                    adjustedEndDate.setDate(adjustedEndDate.getDate() - 1);

                    let extra = '';
                    if (task.ini_date) {
                        extra += `<b>🟢 Fecha real inicio:</b> ${gantt.date.date_to_str("%d %M %Y")(new Date(task.ini_date))}<br>`;
                    }
                    if (task.fin_date) {
                        extra += `<b>🔴 Fecha real fin:</b> ${gantt.date.date_to_str("%d %M %Y")(new Date(task.fin_date))}<br>`;
                    }            

                    return `
                        <b>Tarea:</b> ${task.task} días<br>
                        <b>${task.text}</b><br>
                        <b>Inicio:</b> ${gantt.date.date_to_str("%d %M %Y")(task.start_date)}<br>
                        <b>Finaliza:</b> ${gantt.date.date_to_str("%d %M %Y")(adjustedEndDate)}<br>
                        <b>Duración:</b> ${task.duration} días<br>
                        ${extra}  
                    `;
                };

                gantt.config.columns = [
                    {
                        label: "<b>Id</b>",
                        align: "center",
                        width: 60,
                        template: function (task) {
                            const index = gantt.getTaskIndex(task.id);
                            if (index === 0) {
                                return task.task;
                            }
                            const prevTask = gantt.getTaskByIndex(index - 1);
                            if (prevTask && prevTask.task === task.task) {
                                return "";
                            }
                            return task.task;
                        }
                    },
                        {
                            name: "text",
                            label: "<b>Actividad</b>",
                            align: "left",
                            width: 100,
                            template: function(task) {
                                return `<span style="font-size: 8px;">${task.text}</span>`;
                            }
                        },
                        {
                        name: "details",
                        label: "<b>🔍</b>",
                        align: "center",
                        width: 40,
                        template: function(task) {

                        return `<button 
                            class="btn-show-details" 
                            data-task-id="${task.id}" 
                            style="
                                font-size: 14px;
                                padding: 2px 2px;
                                background-color: #ffffff;
                                border: 0px solid #ccc;
                                border-radius: 8px;
                                cursor: pointer;
                                transition: background-color 0.2s ease;
                            "
                            onmouseover="this.style.backgroundColor='#e0e0e0'"
                            onmouseout="this.style.backgroundColor='#f0f0f0'"
                        >
                            📄
                        </button>`;

                        }
                    }
                ];

                gantt.locale = {
                    date: {
                        month_full: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
                        month_short: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
                        day_full: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"],
                        day_short: ["Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb"]
                    }
                };

                gantt.config.language = "es";

                gantt.attachEvent("onMouseMove", function (id, e) {
                    const target = e.target;
                    const cell = target.closest(".gantt_cell");

                    if (cell && cell.getAttribute("data-column-name") === "text") {
                        const task = gantt.getTask(id);
                        if (task) {
                            gantt.tooltip.show(e.target, task.text);
                        }
                    } else {
                        gantt.tooltip.hide();
                    }
                });

                let currentMonth = null;
                const monthColors = ['#C00000', '#002060', '#C00000', '#002060', '#C00000', '#002060', '#C00000', '#002060', '#C00000', '#002060', '#C00000', '#002060'];

                gantt.templates.date_scale = function(date) {
                    const options = { day: 'numeric', month: 'short' };
                    const formattedDate = new Date(date).toLocaleDateString('es-ES', options);
                    const monthIndex = new Date(date).getMonth();
                    const fechasfes = ['16 feb','17 feb','23 feb','2 mar','9 mar','16 mar','23 mar','30 mar','6 apr','13 apr','17 apr','18 apr','19 apr','20 apr'];

                    const formattedDate2 = new Date(date).toLocaleDateString('es-ES', { day: 'numeric', month: 'short' });
                    const fechasFormateadas = fechasfes.map(fecha => new Date(fecha).toLocaleDateString('es-ES', { day: 'numeric', month: 'short' }));

                    let monthStyle2;
                    if (fechasFormateadas.includes(formattedDate2)) {
                        monthStyle2 = `color: red; font-weight: bold;`;
                    } else {
                        monthStyle2 = `background-color: ${monthColors[monthIndex]}; color: white; font-weight: bold;`;
                    }

                    return `<span class="month-cell" style="font-size: 12px; ${monthStyle2}">${formattedDate}</span>`;
                };

                gantt.config.scale_height = 100;
                gantt.config.row_height = 25;
                gantt.config.task_height = 50;

                gantt.config.subscales = [
                    {
                        unit: "year",
                        step: 1,
                        date: function (date) {
                            const options = { year: 'numeric' };
                            const formattedDate = new Date(date).toLocaleDateString('es-ES', options);
                            return `<span style="font-size: 24px; color: #333333; font-weight: bold; text-align: left;">${formattedDate}</span>`;
                        },
                    },
                    {
                        unit: "day",
                        date: function (date) {
                            const options = { weekday: 'short' };
                            let dayName = new Date(date).toLocaleDateString('es-ES', options).toLowerCase();
                            let dayNameUpper = dayName.toUpperCase();

                            // Formatear la fecha en formato 'YYYY-MM-DD' para buscar en el objeto
                            const yyyy = date.getFullYear();
                            const mm = String(date.getMonth() + 1).padStart(2, '0');
                            const dd = String(date.getDate()).padStart(2, '0');
                            const fechaStr = `${yyyy}-${mm}-${dd}`;

                            // Verificar si es domingo o festivo
                            const esDomingo = (dayName === 'dom');
                            const esFestivo = festivosColombia.hasOwnProperty(fechaStr);

                            if (esDomingo || esFestivo) {
                                // Rojo para domingo o festivos
                                return `<span style="color: red; font-weight: bold; font-size: 14px;">${dayNameUpper}</span>`;
                            } else {
                                // Azul oscuro para otros días
                                return `<span style="color: #002060; font-weight: normal; font-size: 12px;">${dayNameUpper}</span>`;
                            }
                        },
                        align: "center"
                    },
                ];

                let maxTaskId = 0;
                let maxTaskCode = 0;

                const urlParams = new URLSearchParams(window.location.search);
                const idot = urlParams.get('idot');        

                async function loadTasks() {
                    try {
                        const response = await fetch('/tareasg', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ idot })
                        });

                        const data = await response.json();
                        if (data && data.tasks && data.tasks.length > 0) {
                            maxTaskId = Math.max(...data.tasks.map(task => Number(task.id)));
                            maxTaskCode = Math.max(...data.tasks.map(task => Number(task.task)));
                            

                            const today = new Date();


                            const ganttData = data.tasks.map(task => {
                            const start = parseDateNoTimezone(task.start_date);
                            const end = parseDateNoTimezone(task.end_date);
                            const adjustedEndDate = new Date(end);
                            adjustedEndDate.setDate(adjustedEndDate.getDate() + 1);

                            // NUEVO: ini_date
                            let adjustedIniDate = null;
                            if (task.ini_date) {
                                adjustedIniDate = parseDateNoTimezone(task.ini_date);
                                adjustedIniDate.setDate(adjustedIniDate.getDate() + 1);
                            }

                            let adjustedFinDate = null;
                            if (task.fin_date) {
                                adjustedFinDate = parseDateNoTimezone(task.fin_date);
                                adjustedFinDate.setDate(adjustedFinDate.getDate() + 1);
                            }

                            let progress = 0;
                            const today = parseDateNoTimezone(new Date().toISOString());

                            if (today >= adjustedEndDate) {
                                progress = 1;
                            } else if (today > start) {
                                const totalDuration = adjustedEndDate - start;
                                const elapsed = today - start;
                                progress = elapsed / totalDuration;
                                if (progress > 1) progress = 1;
                                if (progress < 0) progress = 0;
                            }
                            return {
                                id: task.task,
                                task: task.task,
                                text: task.text,
                                start_date: formatDateWithoutTimezone(start),         // <-- string
                                end_date: formatDateWithoutTimezone(adjustedEndDate), // <-- string
                                fin_date: adjustedFinDate ? formatDateWithoutTimezone(adjustedFinDate) : null,  // <--nv
                                ini_date: adjustedIniDate ? formatDateWithoutTimezone(adjustedIniDate) : null,  // <--nv
                                duration: task.duration,
                                color: task.color || '',
                                progress: progress
                            };
                            });
                            // 1. Agregar estilos por tarea
                            ganttData.forEach(task => {
                                if (task.color) {
                                    const style = document.createElement('style');
                                    style.innerHTML = `
                                        .gantt_task_line.custom-task-color-${task.id} {
                                            background-color: #D3D3D3 !important;
                                            border: 1px solid ${task.color} !important;
                                        }
                                        .gantt_task_line.custom-task-color-${task.id} .gantt_task_progress {
                                            background-color: ${task.color} !important;
                                        }
                                    `;
                                    document.head.appendChild(style);
                                }
                            });

                            // 2. Aplicar clase a cada tarea para el CSS
                            gantt.templates.task_class = function(start, end, task) {
                                return task.color ? `custom-task-color-${task.id}` : "";
                            };


                            // 3. Texto negro dentro de barra
                            gantt.templates.task_text = function(start, end, task) {
                                const percent = Math.round(task.progress * 100);
                                return `<span style="font-size:8px; color: black;">${task.text} (${percent}%)</span>`;
                            };

                            // Inicializa primer gantt
                            gantt.init("gantt_here");
                            gantt.parse({ data: ganttData, links: [] });
                        } else {
                            console.log("No se encontraron tareas.");
                        }
                    } catch (error) {
                        console.error("Error al cargar tareas:", error);
                    }
                }

                loadTasks();
                
                function formatDateWithoutTimezone(date) {
                if (!date) return "";
                    // Extrae año, mes y día en la zona local (sin desfase)
                    const y = date.getFullYear();
                    const m = String(date.getMonth() + 1).padStart(2, '0'); // Mes empieza en 0
                    const d = String(date.getDate()).padStart(2, '0');

                    return `${y}-${m}-${d}`;
                    }

                function parseDateNoTimezone(dateString) {
                    if (!dateString) return null;
                    const [year, month, day] = dateString.split("T")[0].split("-");
                    return new Date(year, month - 1, day);  // Mes es 0-based en Date
                    }

            </script>

            <script> 
            document.addEventListener("click", function (e) {
                if (e.target && e.target.classList.contains("btn-show-details")) {
                    const taskId = e.target.getAttribute("data-task-id");
                    const task = gantt.getTask(taskId);

                    const formatDate = gantt.date.date_to_str("%d %M %Y");

                    const adjustedEndDate = new Date(task.end_date);
                    adjustedEndDate.setDate(adjustedEndDate.getDate() - 1);

                    // Campos adicionales si existen
                    const iniDateFormatted = task.ini_date ? formatDate(new Date(task.ini_date)) : null;
                    const finDateFormatted = task.fin_date ? formatDate(new Date(task.fin_date)) : null;

                    // Construir contenido del modal con campos opcionales
                    let modalContent = `
                        <div style="
                            font-family: Arial, sans-serif; 
                            font-size: 14px; 
                            line-height: 1.6; 
                            border: 2px solid #007bff; 
                            border-radius: 10px; 
                            padding: 20px; 
                            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.25); 
                            background-color: #ffffff;
                        ">
                            <div style="margin-bottom: 12px;"><strong>🆔 ID:</strong> ${task.id}</div>
                            <div style="margin-bottom: 12px;"><strong>📌 Actividad:</strong> ${task.text}</div>
                            <div style="margin-bottom: 12px;"><strong>⏳ Duración:</strong> ${task.duration} días</div>
                            <div style="margin-bottom: 12px;"><strong>📅 Inicio:</strong> ${formatDate(task.start_date)}</div>
                            <div style="margin-bottom: 12px;"><strong>🏁 Fin:</strong> ${formatDate(adjustedEndDate)}</div>
                    `;

                    if (iniDateFormatted) {
                        modalContent += `<div style="margin-bottom: 12px;"><strong>🟢 Fecha real de inicio:</strong> ${iniDateFormatted}</div>`;
                    } else {
                        modalContent += `<div style="margin-bottom: 12px;"><strong>🟢 Fecha real de inicio:</strong> <span style="color: gray;">Sin dato</span></div>`;
                    }

                    if (finDateFormatted) {
                        modalContent += `<div style="margin-bottom: 12px;"><strong>🔴 Fecha real de fin:</strong> ${finDateFormatted}</div>`;
                    } else {
                        modalContent += `<div style="margin-bottom: 12px;"><strong>🔴 Fecha real de fin:</strong> <span style="color: gray;">Sin dato</span></div>`;
                    }


                    modalContent += `</div>`; // Cierra el div principal

                    showModal(modalContent);
                }
            });
            </script>
        </body>
</html>

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Registro</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <%- include('partials/head') %>

    <!-- Agregar el estilo para el campo deshabilitado -->
    <style>
        .input-disabled {
            background-color: blue;  /* Fondo azul */
            color: white;  /* Texto blanco */
            cursor: not-allowed;  /* Cambiar el cursor para indicar que no es editable */
        }
    </style>
</head>
<body>
    <script src="app.js"></script>
    <%- include('partials/navigation') %>  
    <div style="display: inline;">
        <h5 style="font-size: 14px; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); transition: color 0.3s ease;" 
            onmouseover="this.querySelector('.user').style.color='darkblue'; this.querySelector('.name').style.color='darkred';" 
            <span class="user" style="color: rgb(211, 88, 17); padding-left: 10px;"><%= userUser %></span>
        </h5>
    </div> 
    <div class="content">
        <h4>Registro de Inventario</h4>
        <div class="register-form30"> 
            <form id="registerForm" action="/inventarios" method="POST"> 
                <div class="contenedor__login-register">
                    <input type="button" class="btn-copiar" value="Copiar" tabindex="-1">
                    <h1></h1>
                    <input type="text" name="CodActivo" class="input-small" placeholder="Activo" required autocomplete="off">
                    <h1></h1>
                    <input type="text" name="DesGen" class="input-small" placeholder="Descripcion Generica" required autocomplete="off">
                    <h1></h1>
                    <input type="text" name="DesAct" class="input-small" placeholder="Descripcion Activo" required autocomplete="off">
                    <h1></h1>
                    <input type="text" name="observ" class="input-small" placeholder="Observaciones"  autocomplete="off">
                    <h1></h1>
                    <h1></h1>
                    <div>
                        <label for="Estado">Estado:</label>
                        <select name="Estado" id="Estado">
                            <option value="Bueno" selected>Bueno</option>
                            <option value="Regular">Regular</option>
                            <option value="Malo">Malo</option>
                        </select>
                    </div>
                    
                    <div>
                        <label for="Propio">Propio:</label>
                        <select name="Propio" id="Propio">
                            <option value="Si" selected>Si</option>
                            <option value="No">No</option>
                            <option value="Alquilado">Alquilado</option>
                        </select>
                    </div>

                    <div style="display: inline;">
                        <h5></h5>
                        <input type="submit" class="btn-save" value="Registrar" tabindex="-1">
                        <a href="#" id="cancelBtn" class="btn-cancel" tabindex="-1">Cancelar</a> <!-- Modificado: Cambiar href -->
                    </div>
                    <!-- Campo oculto para enviar el valor de CodActivo -->
                    <input type="hidden" name="CodActivoHidden" id="CodActivoHidden">
                </div>       
                <br>    
                <input type="button" class="btn-copiar" value="Eliminar" tabindex="-1" style="opacity: 0;" id="btnEliminar">

                <div style="display: inline;">
                    <h5></h5>
                    <input type="submit" id="btnSalir" class="btn-salir" value="Salir">
                    <br><br>    
                </div>

                
            </form>
        </div>
    </div>

    <script>
        // Establece el enfoque inicial en el primer campo de entrada
        window.onload = function() {
            const firstInput = document.querySelector('input[name="CodActivo"]');
            firstInput.focus();
            // Deshabilitar la capacidad de escribir
            firstInput.addEventListener('keydown', (event) => {
                event.preventDefault(); // Bloquea cualquier tecla que se presione
            });
        };

        // Manejar el clic en el botón "Copiar"
        document.querySelector('.btn-copiar').addEventListener('click', async function() {
            try {
                // Leer el contenido del portapapeles
                const clipboardText = await navigator.clipboard.readText();

                // Asignar el valor del portapapeles al primer campo de entrada
                const firstInput = document.querySelector('input[name="CodActivo"]');
                firstInput.value = clipboardText; // Pega el contenido del portapapeles

                // Mover el foco al segundo campo de entrada
                document.querySelector('input[name="DesGen"]').focus();

                // Deshabilitar el primer input y cambiar el estilo
                firstInput.setAttribute('readonly', true);  // Cambiado: Usamos 'readonly' en lugar de 'disabled'
                firstInput.classList.add('input-disabled');
                
                // Deshabilitar el botón Copiar
                document.querySelector('.btn-copiar').disabled = true;

                // Enviar el valor a un campo oculto para enviarlo al servidor
                document.querySelector('#CodActivoHidden').value = clipboardText;
                
            } catch (err) {
                console.error('Error al leer el portapapeles:', err);
                alert('Hubo un error al acceder al portapapeles.');
            }
        });

        // Detectar cuando el valor es pegado en el primer input y saltar al segundo
        document.querySelector('input[name="CodActivo"]').addEventListener('input', function() {
            // Verifica si el campo tiene un valor (indica que se pegó algo)
            if (this.value.trim() !== '') {
                // Mueve el foco al siguiente campo (segundo input)
                document.querySelector('input[name="DesGen"]').focus();
            }
        });

        // Función para manejar el clic en el botón "Cancelar"
        document.getElementById("cancelBtn").addEventListener("click", function(event) {
            event.preventDefault();  // Evitar la acción por defecto (ir a una URL)
            // Limpiar todos los campos del formulario
            const form = document.getElementById("registerForm");
            form.reset();

            // Habilitar el primer input y remover el estilo de deshabilitado
            const firstInput = document.querySelector('input[name="CodActivo"]');
            firstInput.removeAttribute('readonly');
            firstInput.classList.remove('input-disabled');

            // Habilitar el botón Copiar de nuevo
            document.querySelector('.btn-copiar').disabled = false;

            // Colocar el foco en el primer input
            firstInput.focus();
        });

        // Función para manejar el clic en el botón "Registrar"
        document.querySelector('.btn-save').addEventListener("click", function() {
            // Habilitar el botón Copiar nuevamente si el formulario es registrado
            document.querySelector('.btn-copiar').disabled = false;
        });

        // Validación del formulario antes de enviarlo
        document.getElementById('registerForm').addEventListener('submit', async function(event) {
            event.preventDefault(); // Evitar que el formulario se envíe de forma tradicional

            // Verificar si el campo CodActivo tiene un valor
            const codActivo = document.querySelector('input[name="CodActivo"]').value.trim();
            if (!codActivo) {
                alert('El campo CodActivo es obligatorio.');
                return;
            }

            const formData = new FormData(this);
            const response = await fetch('/inventarios', {
                method: 'POST',
                body: new URLSearchParams(formData)
            });

            const result = await response.json();

            if (result.status === 'success') {
                Swal.fire({
                    title: result.title,
                    text: result.message,
                    icon: result.status,
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.href = '/inventarios'; // Redirigir al usuario si es necesario
                });
            } else if (result.status === 'exists' && result.options) {
                // Si ya existe y hay opciones (eliminar o mantener)
                Swal.fire({
                    title: result.title,
                    text: result.message,
                    icon: result.status,
//                    showCancelButton: true,
 //                   confirmButtonText: 'Eliminar',
 //                   cancelButtonText: 'Mantener',
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Si el usuario elige eliminar
                        //eliminarActivo(codActivo); // Llamada a la función para eliminar el activo

                        // Hacer visible el botón de eliminar
                        document.getElementById('btnEliminar').style.opacity = '1'; // Cambia a visible
                        //Swal.fire('Registro Eliminado.', '', 'info');
                    } else {
                        // Si el usuario elige mantener, no hacemos nada
                        Swal.fire('El Activo se mantiene sin cambios.', '', 'info');
                    }
                });
            } else {
                Swal.fire({
                    title: result.title,
                    text: result.message,
                    icon: result.status,
                    showConfirmButton: true
                });
            }
        });

        // Función para eliminar el activo
        async function eliminarActivo(codActivo) {
            Swal.fire('Registro Eliminado 1.', '', 'info');
            const response = await fetch(`/inventarios/eliminar/${codActivo}`, {
                method: 'DELETE'
            });

            const result = await response.json();

            if (result.status === 'success') {
                Swal.fire({
                    title: result.title,
                    text: result.message,
                    icon: result.status,
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.href = '/inventarios'; // Redirigir después de eliminar
                });
            } else {
                Swal.fire({
                    title: result.title,
                    text: result.message,
                    icon: result.status,
                    showConfirmButton: true
                });
            }
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM completamente cargado');

            document.getElementById('btnEliminar').addEventListener('click', async function(event) {
                console.log('Botón clickeado');
                event.preventDefault(); // Evitar el comportamiento por defecto (enviar formulario)
                const form = document.getElementById('registerForm'); // Obtener el formulario
                const formData = new FormData(form);
                console.log('Datos del formulario: ', Array.from(formData.entries()));

                const response = await fetch('/inventeli', {
                    method: 'POST',
                    body: new URLSearchParams(formData)
                });

                console.log('Respuesta del servidor recibida');

                const result = await response.json();
                Swal.fire({
                    title: result.title || 'Error',
                    text: result.message || 'Hubo un problema',
                    icon: result.status,
                    showConfirmButton: true,
                    timer: result.status === 'success' ? 2500 : null // Timer solo para éxito
                }).then(() => {
                    if (result.status === 'success') {
                        console.log('Redirigiendo...');
                        window.location.href = '/inventarios'; // Redirigir al usuario si es necesario
                    }
                });
            });
        });
    </script>

    <script>
        document.getElementById('btnSalir').addEventListener('click', function() {
            // Acción para el botón "Salir"
            window.location.href = '/'; // Redirige a la página de logout o cerrar sesión
        });
    </script>

    <%- include('partials/footer') %>  
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="/src/main.js"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
</body>
</html>

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <title>Subir archivo PDF</title>
    <link rel="stylesheet" href="/css/style.css">
    <%- include('partials/head') %>
</head>
<body>
    <%- include('partials/navigation') %>  
    <span style="color: #0a024d; text-shadow: 3px 1px 2px rgba(0, 0, 0, 0.3);"><%= propoder %></span>
    <span style="color: #d11b33; text-shadow: 3px 1px 2px rgba(0, 0, 0, 0.3);"><%= proname %></span>

    <div class="content">
        <h4>Cargar Poder PDF</h4>
        <br><br>
        <div class="register-formAncho"> 
            <!-- Formulario para cargar el archivo -->
            <form id="uploadForm" action="/uploadpdf" method="POST" enctype="multipart/form-data">

                <br>
                <!-- Campo name como Select -->
                <select class="simple-border" name="ciud" id="name" required>
                    <option value="" disabled selected>Apartamento que Otorga Poder</option>
                    <!-- Las opciones de name serán cargadas dinámicamente aquí -->
                </select>
                <hr class="divider">


                <input type="text" name="numprop" class="input-small" id="numprop" placeholder="Nombre de quien Otorga" required maxlength="30" style="background-color: #0c023a; color: #fdfdfd;" readonly tabindex="-1">


                <input type="text" name="name" class="input-small" id="names" placeholder="Propietario Otorga" required maxlength="50" style="display: none;">
                <br><br>    
                <div style="display: none;">
                    <h6>Recibe Poder</h6>
                    <input type="text" name="propoder" class="input-small" placeholder="Numero Propiedad recibe" maxlength="30" style="display: inline;">
                    <input type="text" name="proname" class="input-small" placeholder="Propietario Recibe" maxlength="50" style="display: inline;">
                    <h1></h1>
                    <a href="/poderesusu">Cargar Poder</a>
                </div>    


                <span style="color: #33025c; text-shadow: 3px 1px 2px rgba(0, 0, 0, 0.3);">Otorgado por:</span> <span style="color: #d11b33;"><%= numprop %></span>
                <span style="color: #d11b33; text-shadow: 3px 1px 2px rgba(0, 0, 0, 0.3);"><%= name %></span>
                <br><br>
                <input type="text" name="empresaId" id="empresaId" value="<%= nomid %>" placeholder="Nombre de la empresa" style="display: none;">
                <input type="text" name="Ipropoder" id="Ipropoder" value="<%= propoder %>" placeholder="Nombre de la empresa" style="display: none;">
                <input type="text" name="Inumprop" id="Inumprop" value="<%= numprop  %>" placeholder="Nombre de la empresa" style="display: none;">
                <input type="file" name="file" accept=".pdf" required style="font-size: 14px; width: 350px;">
                <button type="submit" class="btn btn-success btn-sm btnind-hover-effect" style="width: auto; font-size: 14px; background-color: blue; border-color: blue;">
                    Subir PDF
                </button>
            </form>
            
            <br>
        </div>      
        <br>
        <a href="/poderesusu" class="btn btn-success btn-sm btnind-hover-effect">Regresar</a>
    </div>

    <script>
        // Usar 'submit' de forma asíncrona
        document.getElementById('uploadForm').addEventListener('submit', async function(event) {
            event.preventDefault();  // Prevenir el envío tradicional del formulario
    
            const formData = new FormData(this);  // Obtener los datos del formulario
    
            try {
                const response = await fetch('/uploadpdf', {
                    method: 'POST',
                    body: formData
                });
    
                const result = await response.json();  // Obtener la respuesta JSON
    
                Swal.fire({
                    title: result.status === 'success' ? 'Éxito' : 'Error',
                    text: result.message || 'Hubo un problema',
                    icon: result.status === 'success' ? 'success' : 'error',
                    showConfirmButton: true,
                    timer: result.status === 'success' ? 1000 : null // Timer solo para éxito
                }).then(() => {
                    if (result.status === 'success') {
                        window.location.href = '/poderesusu'; // Redirigir al usuario si es necesario
                    }
                });
            } catch (error) {
                console.error('Error al cargar el archivo:', error);
                Swal.fire('Error', 'Hubo un problema al cargar el archivo', 'error');
            }
        });
    </script>
    
    <script>
        // Función para cargar los datos de USUARIOS
        async function cargarDatos() {
            //console.log('Cargando datos de usuarios...');
            try {
                const response = await fetch('/datos');
                const data = await response.json();

                // Verificar los datos recibidos
                //console.log('Datos recibidos:', data);
    
                if (data.status !== 'error') {
                    const ciudadesSelect = document.getElementById('name');
    
                    if (data.ciudades && Array.isArray(data.ciudades)) {
                        //console.log('Ciudades disponibles:', data.ciudades);
    
                        // Llenamos el select con las opciones
                        data.ciudades.forEach(ciudad => {
                            //console.log(`Procesando ciudad: ${JSON.stringify(ciudad)}`);
                            const option = document.createElement('option');
                            option.value = ciudad.name;  // Usamos numprop como valor
                            option.textContent = ciudad.numprop;  // Mostramos el nombre de la ciudad
                            ciudadesSelect.appendChild(option);
                        });
                    } else {
                        console.log('No se encontraron ciudades en los datos');
                    }
                    // Escuchar el cambio en el select
                    ciudadesSelect.addEventListener('change', function () {
                        // Obtener el valor (numprop) seleccionado
                        const selectedValue = this.value;
                        console.log('Valor seleccionado (numprop):', selectedValue);
    
                        // Obtener el texto (name) de la opción seleccionada
                        const selectedOptionText = this.options[this.selectedIndex].textContent;
                        console.log('Texto de la opción seleccionada:', selectedOptionText);
    
                        // Mostrar los valores de numprop y name en los campos correspondientes
                        document.getElementById('numprop').value = selectedValue;
                        document.getElementById('names').value = selectedOptionText;
                    });
                } else {
                    console.log('Error en los datos:', data.status);
                }
               

            } catch (error) {
                console.error('Error al cargar los datos:', error);
            }
        }
    
        // Llamar a la función para cargar los datos cuando la página se carga
        window.onload = cargarDatos;
    </script>

    <%- include('partials/footer') %>  
</body>
</html>
